import info.gridworld.grid.Grid;
import info.gridworld.grid.AbstractGrid;
import info.gridworld.grid.Location;


import java.util.*;

public class SparseBoundedGrid2<E> extends AbstractGrid<E> {
	private int cols;
	private int rows;
	private Map<Location, E> occupantMap;
	
	public SparseBoundedGrid2(int rows, int cols) {
		this.rows = rows;
		this.cols = cols;
		occupantMap = new HashMap<Location, E>();
	}

	@Override
	public boolean isValid(Location loc) {
		 return 0 <= loc.getRow() && loc.getRow() < getNumRows()
	                && 0 <= loc.getCol() && loc.getCol() < getNumCols();
	}
	
	@Override
	public E get(Location loc) {
		if (!isValid(loc))
            throw new IllegalArgumentException("Location " + loc
                    + " is not valid");
		return occupantMap.get(loc);
	}

	@Override
	public int getNumCols() {
		return cols;
	}

	@Override
	public int getNumRows() {
		return rows;
	}

	@Override
	public ArrayList<Location> getOccupiedLocations()
	{
	    ArrayList<Location> a = new ArrayList<Location>();
	    for (Location loc : occupantMap.keySet())
	        a.add(loc);
	    return a;
	}

	@Override
	public E put(Location loc, E obj) {
		if (!isValid(loc))
            throw new IllegalArgumentException("Location " + loc
                    + " is not valid");
        if (obj == null)
            throw new NullPointerException("obj == null");
        // Add the object to the grid.
        return occupantMap.put(loc, obj);
	}

	@Override
	public E remove(Location loc) {
		if (!isValid(loc))
            throw new IllegalArgumentException("Location " + loc
                    + " is not valid");
        
        // Remove the object from the grid.
		return occupantMap.remove(loc);
	}
}

