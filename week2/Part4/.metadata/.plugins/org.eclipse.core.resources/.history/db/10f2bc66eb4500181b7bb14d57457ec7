import info.gridworld.grid.Grid;
import info.gridworld.grid.AbstractGrid;
import info.gridworld.grid.Location;


import java.util.*;

public class UnBoundedGrid2<E> extends AbstractGrid<E> {
	private int size;	//the size of the occupantArray
	private Object[][] occupantArray; // the array storing the grid elements
	
	public UnBoundedGrid2() {
		size = 16;
		occupantArray = new Object[size][size];
	}

	@Override
	public boolean isValid(Location loc) {
		 return (loc.getCol() >= 0 && loc.getRow() >= 0);
	}
	
	@Override
	public E get(Location loc) {
		if (!isValid(loc))
            throw new IllegalArgumentException("Location " + loc
                    + " is not valid");
		if(loc.getRow() >= size || loc.getCol() >= size) {
			return null;
		}
		return (E) occupantArray[loc.getRow()][loc.getCol()];
	}

	@Override
	public int getNumCols() {
		return -1;
	}

	@Override
	public int getNumRows() {
		return -1;
	}

	@Override
	public ArrayList<Location> getOccupiedLocations()
	{
	    ArrayList<Location> a = new ArrayList<Location>();
	    for (int i = 0; i < size; ++i) {
	    	for(int j = 0; j < size; ++j) {
	    		if(occupantArray[i][j] != null) {
	    	        a.add(new Location(i, j));
	    		}
	    	}
	    }
	    return a;
	}

	@Override
	public E put(Location loc, E obj) {
		if (!isValid(loc))
            throw new IllegalArgumentException("Location " + loc
                    + " is not valid");
        if (obj == null)
            throw new NullPointerException("obj == null");
        
        //change size
        if(loc.getRow() >= size || loc.getCol() >= size) {
        	int max = loc.getCol() > loc.getRow() ? loc.getCol() : loc.getRow();
        	int oldSize = size;
        	while(size <= max) {
        		size *= 2;
        	}
        	Object[][] newArray = new Object[size][size];
        	for(int i = 0; i < oldSize; ++i) {
        		for(int j = 0; j < oldSize; ++j) {
        			newArray[i][j] = occupantArray[i][j];
        		}
        	}
        	occupantArray = newArray;
        }
        // Add the object to the grid.
        E oldOccupant = get(loc);
        occupantArray[loc.getRow()][loc.getCol()] = obj;
        return oldOccupant;
	}

	@Override
	public E remove(Location loc) {
		if (!isValid(loc))
            throw new IllegalArgumentException("Location " + loc
                    + " is not valid");
        
        // Remove the object from the grid.
		if(loc.getRow() >= size || loc.getCol() >= size) {
			return null;
		}
		else {
			E oldOccupant = get(loc);
			occupantArray[loc.getRow()][loc.getCol()] = null;
			return oldOccupant;
		}
	}
}

